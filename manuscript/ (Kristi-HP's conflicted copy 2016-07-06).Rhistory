facet_grid( ~ Sex)
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point() +
geom_line(data = pd.age.Sex, aes(age, y)) +
facet_grid( ~ Sex)
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point() +
geom_line(data = pd.age.Sex, aes(age, y)) +
facet_grid( ~ Sex) +
theme_light()
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point() +
geom_line(data = pd.age.Sex, aes(age, y), size = I(2)) +
facet_grid( ~ Sex) +
theme_light()
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point() +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1)) +
facet_grid( ~ Sex) +
theme_light()
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point() +
geom_line(aes(group = Subject)) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1)) +
facet_grid( ~ Sex) +
theme_light()
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point() +
geom_line(aes(group = Subject)) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1), color = "black") +
facet_grid( ~ Sex) +
theme_light()
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point() +
geom_line(aes(group = Subject)) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none")
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point(aes(color = Subject)) +
geom_line(aes(color = Subject)) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none")
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point(aes(color = as.factor(Subject))) +
geom_line(aes(color = as.factor(Subject))) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none")
pd.age.Sex <- partial_2d(fit.mtree, "age", "Sex", newdata = Orthodont)
pd.age.Sex <- partial_2d(fit.mtree, "age", "Sex", newdata = Orthodont,
super.type = "regression")
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point(aes(color = as.factor(Subject))) +
geom_line(aes(color = as.factor(Subject))) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none")
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point(aes(color = as.factor(Subject))) +
geom_line(aes(color = as.factor(Subject))) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none") +
ylab("f(age)")
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point(aes(color = as.factor(Subject))) +
geom_line(aes(color = as.factor(Subject))) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none") +
xlab("Age") +
ylab("f(age|Sex)")
# Simple mertree
fit.mtree <- mertree(distance ~ age + Sex + (age | Subject) + (0 + Sex | Subject),
data = Orthodont,
unbiased = FALSE,
cv = TRUE,
do.trace = TRUE)
plot(fit.mtree)  # tree diagram
# Partial dependence of distance on age and Sex
pd.age.Sex <- partial_2d(fit.mtree, "age", "Sex", newdata = Orthodont,
super.type = "regression")
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point(aes(color = as.factor(Subject))) +
geom_line(aes(color = as.factor(Subject))) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none") +
xlab("Age") +
ylab("f(age|Sex)")
# Simple mertree
fit.mtree <- mertree(distance ~ age + Sex + (age | Subject) + (0 + Sex | Subject),
data = Orthodont,
unbiased = TRUE,
# cv = TRUE,
do.trace = TRUE)
plot(fit.mtree)  # tree diagram
pd.age.Sex <- partial_2d(fit.mtree, "age", "Sex", newdata = Orthodont,
super.type = "regression")
ggplot(Orthodont, aes(age, distance, color = Sex)) +
geom_point(aes(color = as.factor(Subject))) +
geom_line(aes(color = as.factor(Subject))) +
geom_line(data = pd.age.Sex, aes(age, y), size = I(1.5), color = "black") +
facet_grid( ~ Sex) +
theme_light() +
theme(legend.position = "none") +
xlab("Age") +
ylab("f(age|Sex)")
classes <- sapply(c("dist", "speed"), function(x) {
class(cars[[x]])
})
classes
classes["dist"]
x <- 1L:3L
class(x)
class(x) <- classes["dist"]
x
class(x)
classes["dist"]
class(x) <- classes["dist"]
x
class(x)
library(lattice)
xyplot(dist ~ speed, data = cars)
xyplot(dist ~ speed, data = cars, type = c("l", "rug"))
xyplot(dist ~ speed, data = cars, panel = function(x, y, ...) {panel.xyplot(x, y, ...); panel.rug(x)})
xyplot(dist ~ speed, data = cars, panel = function(x, y, ...) {panel.xyplot(x, y, ...); panel.rug(x)})
devtools::install_github("bgreenwell/partial")
# Load the data
data(BostonHousing2, package = "mlbench")  # load the data
boston <- BostonHousing2[, -c(1, 2, 5)]
# Load required packages
library(partial)
library(randomForest)
set.seed(101)  # for reproducibility
fit.rf <- randomForest(cmedv ~ ., data = boston, importance = TRUE)
print(fit.rf)  # check model results
pdf("boston_rf_vimp.pdf", width = 7, height = 5)
varImpPlot(fit.rf, main = "")  # dotchart of variable importance scores
partial(fit.rf, pred.var = "lstat", plot = TRUE)
partial(fit.rf, pred.var = "lstat", plot = TRUE)
pd <- partial(fit.rf, pred.var = "lstat")
plotPartial(pd)
plotPartial(pd, rug = TRUE)
plotPartial(pd, rug = FALSE)
plotPartial(pd, rug = FALSE, smooth = FALSE)
print(partial(fit.rf, pred.var = "lstat", plot = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
pd
pdp(pd)
xyplot(dist ~ speed, data = cars, type = c("l", "smooth"))
xyplot(dist ~ speed, data = cars, type = "l")
xyplot(dist ~ speed, data = cars)
library(lattice)
xyplot(dist ~ speed, data = cars)
rm(list = ls())
pd <- partial(fit.rf, pred.var = "lstat")
library(partial)
pd <- partial(fit.rf, pred.var = "lstat")
library(randomForest)
fit.rf <- randomForest(cmedv ~ ., data = boston, importance = TRUE)
print(fit.rf)  # check model results
pdf("boston_rf_vimp.pdf", width = 7, height = 5)
varImpPlot(fit.rf, main = "")
data(BostonHousing2, package = "mlbench")  # load the data
boston <- BostonHousing2[, -c(1, 2, 5)]
# Load required packages
library(partial)
library(randomForest)
set.seed(101)  # for reproducibility
fit.rf <- randomForest(cmedv ~ ., data = boston, importance = TRUE)
print(fit.rf)  # check model results
pdf("boston_rf_vimp.pdf", width = 7, height = 5)
varImpPlot(fit.rf, main = "")  #
data(BostonHousing2, package = "mlbench")  # load the data
boston <- BostonHousing2[, -c(1, 2, 5)]
# Load required packages
library(partial)
library(randomForest)
# Fit a random forest
set.seed(101)  # for reproducibility
fit.rf <- randomForest(cmedv ~ ., data = boston, importance = TRUE)
print(fit.rf)  # check model results
pdf("boston_rf_vimp.pdf", width = 7, height = 5)
varImpPlot(fit.rf, main = "")
plot(1:25)
devtools::install_github("bgreenwell/partial")
data(BostonHousing2, package = "mlbench")  # load the data
boston <- BostonHousing2[, -c(1, 2, 5)]
library(randomForest)
set.seed(101)  # for reproducibility
fit.rf <- randomForest(cmedv ~ ., data = boston, importance = TRUE)
partial(fit.rf, pred.var = "lstat", plot = TRUE)
library(partial)
partial(fit.rf, pred.var = "lstat", plot = TRUE)
pd.lstat <- partial(fit.rf, pred.var = "lstat")
plotPartial(pd.lstat)
plotPartial(pd.lstat, smooth = TRUE)
library(lattice)
plotPartial(pd.lstat, smooth = TRUE)
plotPartial(pd.lstat, smooth = TRUE, span = 0.1)
plotPartial(pd.lstat, smooth = TRUE, span = 0.8)
plotPartial(pd.lstat, smooth = TRUE, span = 0.9)
plotPartial(pd.lstat, smooth = TRUE)
plotPartial(pd.lstat, smooth = TRUE, lwd = 2)
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE)
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE, data = boston)
devtools::install_github("bgreenwell/partial")
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE, data = boston)
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE, training.data = boston)
plotPartial(pd.lstat, smooth = TRUE)
devtools::install_github("bgreenwell/partial")
plotPartial(pd.lstat, smooth = TRUE)
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE, training.data = boston)
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE)
plotPartial(pd.lstat, smooth = TRUE, rug = F)
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE)
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE, training.data = boston)
devtools::install_github("bgreenwell/partial")
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE, training.data = boston)
source('~/.active-rstudio-document', echo=TRUE)
prp(pd)
pdp(pd.lstat)
pdp(pd.lstat, training.data = boston)
pdp(pd.lstat, training.data = boston, rug = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pdp(pd.lstat, training.data = boston, rug = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pdp(pd.lstat, training.data = boston, rug = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pdp(pd.lstat, training.data = boston, rug = TRUE)
?quantile
source('~/.active-rstudio-document', echo=TRUE)
pdp(pd.lstat, training.data = boston, rug = TRUE)
devtools::install_github("bgreenwell/partial")
plotPartial(pd.lstat, smooth = TRUE, rug = TRUE, training.data = boston)
pd.lstat.rm <- partial(fit, pred.var = c("lstat", "rm"), .progress = "text")
pd.lstat.rm <- partial(fit.rf, pred.var = c("lstat", "rm"), .progress = "text")
plotPartial(pd.lstat.rm)
plotPartial(pd.lstat.rm, convex.hull = TRUE)
plotPartial(pd.lstat.rm, convex.hull = TRUE, training.data = boston)
devtools::install_github("bgreenwell/partial")
plotPartial(pd.lstat.rm, convex.hull = TRUE, training.data = boston)
fit.rf
varImpPlot(fit.rf)
pd.lstat <- partial(fit.rf, pred.var = "lstat", .progress = "text")
plotPartial(pd.lstat)
pd.lstat.rm <- partial(fit.rf, pred.var = c("lstat", "rm"), .progress = "text")
plotPartial(pd.lstat.rm, convex.hull = TRUE, training.data = boston)
devtools::install_github("bgreenwell/partial")
plotPartial(pf.lstat.rm, rug = TRUE, convex.hull = TRUE, training.data = boston)
plotPartial(pd.lstat.rm, rug = TRUE, convex.hull = TRUE, training.data = boston)
quantile(boston$lstat, probs = 0:10/10)
quantile(boston$rm, probs = 0:10/10)
devtools::install_github("bgreenwell/partial")
plotPartial(pd.lstat.rm, rug = TRUE, convex.hull = TRUE, training.data = boston)
devtools::install_github("bgreenwell/partial")
plotPartial(pd.lstat.rm, rug = TRUE, convex.hull = TRUE, training.data = boston)
?rugplot
?rug
plotPartial(pd.lstat.rm, rug = TRUE, convex.hull = TRUE, training.data = boston)
pdf("partial_extrap.pdf", width = 12, height = 6)
p1 <- plotPartial(pd.lstat, rug = TRUE, training.data = boston)
p2 <- plotPartial(pd.lstat.rm, convex.hull = TRUE, training.data = boston)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
setwd("C:\\Users\\Brandon.Greenwell\\Desktop\\greenwell-partial-2016")
pdf("partial_extrap.pdf", width = 12, height = 6)
p1 <- plotPartial(pd.lstat, rug = TRUE, training.data = boston)
p2 <- plotPartial(pd.lstat.rm, convex.hull = TRUE, training.data = boston)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
?partial
partial(fit.rf, "rm", grid.resolution = 10, plot = TRUE)
partial(fit.rf, "rm", pred.grid = quantile(boston$rm, 0:10/10), plot = TRUE)
partial(fit.rf, "rm", grid.resolution = 30, plot = TRUE)
partial(fit.rf, "rm", pred.grid = quantile(boston$rm, 0:10/10), plot = TRUE)
partial(fit.rf, "rm", pred.grid = 1:9, plot = TRUE)
partial(fit.rf, "rm", grid.resolution = 30, plot = TRUE)
range(boston$rm)
partial(fit.rf, "rm", grid.resolution = 30, plot = TRUE)
partial(fit.rf, "rm", pred.grid = 3:9, plot = TRUE)
pdf("partial_manual.pdf", width = 12, height = 6)
p1 <- partial(fit.rf, "rm", grid.resolution = 30, plot = TRUE)
p2 <- partial(fit.rf, "rm", pred.grid = 3:9, plot = TRUE)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
p1 <- partial(fit.rf, "rm", grid.resolution = 30, plot = TRUE)
p2 <- partial(fit.rf, "rm", pred.grid = 3:9, plot = TRUE)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
pdf("partial_manual.pdf", width = 12, height = 6)
p1 <- partial(fit.rf, "rm", grid.resolution = 30, plot = TRUE)
p2 <- partial(fit.rf, "rm", pred.grid = 3:9, plot = TRUE)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
pdf("partial_manual.pdf", width = 12, height = 6)
p1 <- partial(fit.rf, "rm", grid.resolution = 30, plot = TRUE)
p2 <- partial(fit.rf, "rm", pred.grid = 3:9, plot = TRUE)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
pdf("partial_manual.pdf", width = 12, height = 6)
p1 <- partial(fit.rf, "rm", grid.resolution = 30)
p2 <- partial(fit.rf, "rm", pred.grid = 3:9)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
p1 <- partial(fit.rf, "rm", grid.resolution = 30)
p2 <- partial(fit.rf, "rm", pred.grid = 3:9)
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
pdf("partial_manual.pdf", width = 12, height = 6)
p1 <- plotPartial(partial(fit.rf, "rm", grid.resolution = 30))
p2 <- plotPartial(partial(fit.rf, "rm", pred.grid = 3:9))
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
partial(fit.rf, pred.var = c("lstat", "rm"), plot = TRUE, .parallel = TRUE)
install.packages("doParallel")
pd3 <- partial(fit.rf, pred.var = c("lstat", "rm"), grid.resolution = 10, .parallel = TRUE)
plotPartial(pd3, number = 4, overlap = 0.1)
pd3 <- partial(fit.rf, pred.var = c("lstat", "rm", "ptratio"),
grid.resolution = 10, .parallel = TRUE)
plotPartial(pd3, number = 4, overlap = 0.1)
pdf("partial_manual.pdf", width = 7, height = 5)
plotPartial(pd3, number = 4, overlap = 0.1)
dev.off()
pdf("partial_manual.pdf", width = 12, height = 6)
p1 <- plotPartial(partial(fit.rf, "rm", grid.resolution = 30))
p2 <- plotPartial(partial(fit.rf, "rm", pred.grid = 3:9))
print(p1, position = c(0, 0, 0.5, 1), more = TRUE)
print(p2, position = c(0.5, 0, 1, 1))
dev.off()
pdf("partial_3.pdf", width = 7, height = 5)
plotPartial(pd3, number = 4, overlap = 0.1)
dev.off()
fit.earth <- earth(cmedv ~ ., data = boston, degree = 3, pmethod = "exhaustive")
library(earth)
fit.earth <- earth(cmedv ~ ., data = boston, degree = 3, pmethod = "exhaustive")
summary(fit.earth)
head(boston$chas)
pd3 <- partial(fit.rf, pred.var = c("rm", "ptratio", "chas"),
grid.resolution = 20, .parallel = TRUE)
plotPartial(pd3)
citation(package = "plotmo")
citation(package = "ICEbox")
citation(package = "plyr")
citation(package = "randomForest")
library(e1071)
fit.svm <- svm(cmedv ~ ., data = boston)
fit.svm
partial(fit.svm, "lstat", super.type = "regression", plot = TRUE)
partial(fit.rf, "lstat", super.type = "regression", plot = TRUE)
partial(fit.svm, "lstat", super.type = "regression", plot = TRUE)
partial(fit.svm, "lstat", super.type = "regression", plot = TRUE)
partial(fit.svm, c("lstat", "rm"), super.type = "regression", plot = TRUE)
partial(fit.svm, c("lstat", "rm"), super.type = "regression", plot = TRUE, .progress = "text")
fit.svm <- svm(cmedv ~ ., data = boston)
svm.lstat.rm <- partial(fit.svm, pred.var = c("lstat", "rm"),
super.type = "regression", .progress = "text")
plotPartial(svm.lstat.rm, contour = FALSE)
plotPartial(svm.lstat.rm, contour = FALSE, shade = TRUE)
plotPartial(svm.lstat.rm, convex.hull = TRUE, training.data = boston)
names(fit.svm)
fit.svm <- svm(cmedv ~ ., data = boston)
svm.lstat.rm <- partial(fit.svm, pred.var = "rm", .progress = "text")
?predict.svm
?svm
obj <- tune.svm(cmedv ~ ., data = boston)
obj
?svm
?mlbench
data(PimaIndiansDiabetes2, package = "mlbench")
obj <- tune.svm(Class ~ ., data = PimaIndiansDiabetes2)
data(PimaIndiansDiabetes2, package = "mlbench")
obj <- tune.svm(Class ~ ., data = PimaIndiansDiabetes2)
obj <- tune.svm(diabetes ~ ., data = PimaIndiansDiabetes2)
svm(diabetes ~ ., data = PimaIndiansDiabetes2)
?tune.svm
2^(-1:1)
?svm
obj <- tune.svm(diabetes ~ ., data = PimaIndiansDiabetes2,
gamma = c(0.1, 0.2, 0.3, 0.4, 0.5, 1, 2), cost = 2^(0:4))
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2)
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2, na.action = na.omit)
fit
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2, na.action = na.omit)
?randomForest
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2, na.action = na.omit, classwt = c(1, 2))
fit
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2, na.action = na.omit, classwt = c(2, 1))
fit
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2, na.action = na.omit, classwt = c(5, 1))
fit
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2, na.action = na.omit, classwt = c(1, 5))
fit\
fit
fit <- randomForest(diabetes ~ ., data = PimaIndiansDiabetes2, na.action = na.omit)
varImpPlot(fit)
fit.svm <- svm(diabetes ~ ., data = PimaIndiansDiabetes2)
svm.glucose.insulin <- partial(fit.svm, pred.var = c("glucose", "insulin"),
super.type = "regression", .progress = "text")
fit.svm <- svm(diabetes ~ ., data = PimaIndiansDiabetes2)
svm.glucose.insulin <- partial(fit.svm, pred.var = c("glucose", "insulin"),
super.type = "regression", .progress = "text")
pid <- na.omit(pid)
pid <- na.omit(PimaIndiansDiabetes2)
dim(PimaIndiansDiabetes2)
dim(pid)
fit.svm <- svm(diabetes ~ ., data = pid)
svm.glucose.insulin <- partial(fit.svm, pred.var = c("glucose", "insulin"),
super.type = "regression", .progress = "text")
plotPartial(svm.glucose.insulin, convex.hull = TRUE, training.data = pid)
svm.glucose.insulin
head(svm.glucose.insulin)
dim(pid)
dim(svm.glucose.insulin)
51^2
z <- tune.svm(Species ~ ., data = iris)
z
fit.svm <- svm(Species ~ ., data = iris)
z <- randomForest(Species ~ ., data= iris)
varImpPlot(z)
z
svm.PW.PL <- partial(fit.svm, pred.var = c("Petwl.Width", "Petal.Length"),
super.type = "regression", .progress = "text")
dim(iris)
dim(na.omit(iris))
sapply(iris, range)
sapply(iris[, 1:4], range)
svm.PW.PL <- partial(z, pred.var = c("Petwl.Width", "Petal.Length"),
super.type = "regression", .progress = "text")
data(spam, package = "kernlab")
head(spam)
dim(spam)
dim(na.omit(spam))
data(spam, package = "kernlab")
z <- tune.svm(type ~ ., data = spam)
z
fit.svm <- svm(type ~ ., data = spam)
z <- randomForest(type ~ ., data = spam)
varImpPlot(z)
svm.exc <- partial(fit.svm, pred.var = "charExclamation",
super.type = "regression", .progress = "text")
warnings()
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text")
predict(fit.svm)
predict(fit.svm, type = "prob")
predict(fit.svm, probability = TRUE)
library(kernlab)
fit.svm <- ksvm(type ~ ., data = spam)
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text")
slotNames(fit.svm)
fit.svm@kcall
fit.svm@kcall@data
fit.svm@kcall@data
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text", newdata = spam)
predict(fit.svm)
predict(fit.svm, type = "prob")
predict(fit.svm, type = "prob", newdata = spam)
fit.svm <- ksvm(type ~ ., data = spam, prob.model = TRUE)
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text")
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text",
newdata = spam)
library(kernlab)
predict(fit.svm, type = "prob")
predict(fit.svm, type = "prob", newdata = spam)
head(predict(fit.svm, type = "prob", newdata = spam))
predict.ksvm
?stats4
library(stats4)
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text",
newdata = spam)
?predict
methods(predict)
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text")
detach(package:e1071)
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text",
newdata = spam)
methods(predict)
class(fit.svm)
rm(list = ls())
methods(predict)
library(kernlab)
library(e1071)
data(spam)
fit.svm <- ksvm(type ~ ., data = spam, prob.model = TRUE)
svm.exc <- partial(fit.svm, pred.var = "charExclamation",  grid.resolution = 10,
super.type = "classification", .progress = "text",
newdata = spam)
