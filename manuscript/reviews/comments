Reviewer 1 comments
-------------------

[2] The paper is clear and well laid out.  The package will be useful
to the R community.  The package functions and their arguments are
well thought out, minimal but complete.  The source software is well
structured and makes good use of modern techniques such as plyr::adpl.


[3] I found a number of mostly minor issues.  I also have some
nitpicks and suggestions for features (which may be ignored).

In the examples below, I used pdp version 0.1.0 (downloaded from CRAN)
and R version 3.3.2 64 bit under Win7.


[4] Bug: A graph is produced as expected if the code below is
cut-and-pasted at the command line .  However, if the code is put into
a file (say "foo.R") and source("foo.R") is executed at the command
line, no graph is produced.  (But note that if plot=TRUE is added to
the call to partial(), then a plot is produced as expected.)

library(randomForest)
data(airquality)
ozone.rf <- randomForest(Ozone ~ ., data=airquality, na.action=na.omit)
library(pdp)
pd <- partial(ozone.rf, pred.var="Temp")
plotPartial(pd)


[5] I couldn't get partial() to work with gbm (version 2.1.1) models
(although I didn't try very hard).  Perhaps this is because the gbm
maintainer changed the gbm interface in a non-backcompatible way.  The
following (where gbm.mod is a model built using the gbm package)
    partial(gbm.mod, pred.var="age")
gives
Error in paste("Using", n.trees, "trees...\n") :
    argument "n.trees" is missing, with no default
I also tried
    partial(gbm.mod, pred.var="age", n.trees=100)
but that gives
    Error in .fun(piece, ...) : unused argument (n.trees = 100)


[6] Standard partial matching isn't implemented e.g.

partial(..., type="r")


[7] The following code incorrectly gives an error message
"Error in names(pd_df) <- c(pred.var, "y") :
  'names' attribute [2] must be the same length as the vector [1]"
It seems to work ok if you change the variable names.

library(pdp)
data <- data.frame(V1=1:10, V2=1:10)
mod <- lm(V2~V1, data=data)
partial(mod, pred.var="V1", plot=TRUE) # error


[8] I think you should mention in the documentation something about
the assumptions you make about accessing the model data.  The
following (somewhat contrived) example fails with
"Error in train[[x]] : subscript out of bounds":

data(trees)
foo <- function(data)
{
    lm(Volume~., data=data)
}
mod <- foo(trees)
library(pdp)
partial(mod, pred.var="Girth", plot=TRUE) # fails

and the following silently gives misleading results:

library(pdp)
data(trees)
mod <- lm(Volume~., data=trees)
partial(mod, pred.var="Girth", plot=TRUE) # ok
trees <- trees[1:2,]
partial(mod, pred.var="Girth", plot=TRUE) # wrong xlim

I'm not necessarily saying that you need to resolve the above two
issues, but at least mention in the documentation that this kind of
thing can happen, and how to avoid it (basically call partial in the
same environment used to build the model, and don't change any of the
data used to build the model).


[9] The following code gives an obscure error message:
"Error in seq.default(from = min(train[[x]], na.rm = TRUE),
   to = max(train[[x]],  :
  'from' cannot be NA, NaN or infinite"
Some better handholding for the user may be helpful here.

library(pdp)
data(trees)
mod <- lm(Volume~., data=trees)
partial(mod, pred.var="nosuchvariable", plot=TRUE) # obscure err msg


[10] On page 2 of the paper it says
"The columns of the data frame are labeled in the same order
as the features supplied to pred.var , and the last column is
always labeled y"
What happens if y is one of the predictors?


[11]  Hastie et al. in the book cited in the paper say "Although such a
collection [of partial dependence plots] can seldom provide a
comprehensive depiction of the approximation, it can often produce
helpful clues".  Therefore in in the abstract for the paper, to avoid
overselling consider changing

"relationship between the outcome and predictors of interest can be
easily understood"

to

"relationship between the outcome and predictors of interest can be
more easily understood"


[12] On page 3 in the PDF of the paper, add a newline to the 
error message in the paper:

Error: The training data could not be extracted from object. Please
supply the raw training data using the ...


[13] Is there any reason the package is called pdp but the main function is
called partial?  Consider giving the function the same name as the
package, so e.g the following works (to help the user get started)

library(pdp)
?pdp # fails


[14] partial() should return the same value regardless of whether or not
the plot arg is used?


[15] A call to say par(mfrow=c(2,2)) before calling plotPartial is ignored
by plotPartial.  This is a pity because it would allow multiple plots
to be put on one page like this:

par(mfrow=c(2,2))
partial(ozone.rf, pred.var="Temp", plot=TRUE)
partial(ozone.rf, pred.var="Wind", plot=TRUE)


[16] It would be nice if the functions automatically plotted all the
(important) variables in a grid of plots, without forcing the user to
explicitly specify them.


[17] It would be nice if the functions automatically got the data from
the model used to build the model in more cases without forcing the
user to explicitly specify the data.  Since XGBoost seems now quite
popular, perhaps the authors of that package could be persuaded to
make the original model data available for functions like partial
(currently XGBoost use a custom object xgb.DMatrix which is currently
write-only -- one can't access the data stored in the xgb.DMatrix).


[18] Consider adding a slowtests directory (below pdp/inst/ or
elsewhere) that has tests for all the models supported by the package
(Table 1 in the paper) to easily check back compatibility when
packages change.  (For justification for such tests see for example my
comments on gbm back compatibility above.)  These tests will probably
be quite slow, but that won't be an issue because they won't be
invoked by CRAN check; the slow tests would be just for the maintainer
of the pdp package to run manually.


Reviewer 2 comments
-------------------


1. The Introduction immediately introduces the PDP. You must first motivate why it is important. In a linear model, they are not important. In a linear model with simple interactions, likewise. They first become important if you have non-parametric macine- optimizing techniques. Further, they are not the only idea extant when trying to explain a predictor’s impact on the response. This paper would benefit if you can give a bit more of a lit review here.

1.2 Important Clarifications Required
1. Top of p2. The ICEbox package allows for general construction and visualization of PDP’s. However, it is limited as you only get one dimensional representations. The selling point of your package should focus on the flexibility of graphics and the illustration of non- extrapoloation zones.

2. all pdp figures throughout the paper: Can you make explicit in the caption what code produces the left and right subfigures? I would use the subfigure package in latex and then put a comment in the R code e.g. # Fig 3b.


1.3 Editing

1. p1 abstract: strict assumptions imposed by traditional statistical models
2. p1 pairs should be using curly braces of angle braces, not square braces as this is easily confused with closed intervals.
3. p2 unless the editor disagrees, there is no reason to add “install.packages(“pdp”)” in the text of the paper as it is assumed a user knows how to install a package.
4. p3 “Error: The training...” should be wrapped.
5. Fig 6: the sidebar should be labeled “ozone”. Also, would it be terrible to label all axes even though it is redundant?
6. Fig 7: as beautiful as this is, you should label the sidebar as “logit” or “centered logit” instead of “y”.

2 Suggestions for the Software

1. I understand that you like the feature of having a one-shot function partial to both generate and plot the PDP. I realize that the default is FALSE. However, I still think it’s a disservice to the user as constructing PDP’s is computationally intense and if they get the plot wrong or it’s not to their liking, they will have to regenerate the whole thing again. So, it is my opinion that you should take it out and force two steps: generation and illustration.

2. The package could be more powerful if you allowed a predict function as a parameter. For instance, you cannot currently use ranfom forests to illustrate classification probabilities.

3. p7 I believe there are packages allowing for parallelization in Windows. Can you switch the example so this works on all platforms?
