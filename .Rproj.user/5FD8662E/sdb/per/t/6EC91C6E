{
    "contents" : "#' Partial Dependence (One Variable)\n#'\n#' One- and two-dimensional partial dependence plots for objects of class\n#' \\code{mertree}.\n#'\n#' @param object A \\code{mertree} object.\n#' @param x.name Character string giving the name of the independent variable of\n#'   interest.\n#' @param n Integer giving the number of unique data points to use in\n#'   computing the partial dependence values.\n#' @param x.class Character string specifying the class for \\code{x.name}.\n#' @param newdata An optional data frame.\n#' @param type Character string\n#' @param ... Additional optional arguments passed onto \\code{aaply}.\n#' @note\n#' It may be necessary to supply a value for \\code{x.class} when \\code{n} is\n#' supplied. This is usually the case when \\code{object} is of class\n#' \\code{\"BinaryTree\"} or \\code{\"mertree\"} (with \\code{unbiased = TRUE}).\n#' @importFrom plyr laply\n#' @export\npartial_1d <- function(object, x.name, x.values, n, newdata, which.class = 1L,\n                       ...) {\n  UseMethod(\"partial_1d\")\n}\n\n\npartial_1d.default <- function(object, x.name, x.values, n, newdata, ...) {\n\n  # Data frame\n  newdata <- if (missing(newdata)) eval(object$call$data) else newdata\n\n  x.class <- class(newdata[[x.name]])\n\n  # Predictor values of interest\n  x.values <- if (missing(x.values)) {\n    if (x.class == \"factor\") {\n      levels(newdata[[x.name]])\n    } else if (missing(n)) {\n      sort(unique(newdata[[x.name]]))\n    } else {\n      seq(from = min(newdata[[x.name]]), to = max(newdata[[x.name]]), length = n)\n    }\n  }\n\n  # Make sure x.values has the correct x.class\n  class(x.values) <- x.class\n\n  # Calculate partial dependence values\n  super.type <- superType(object)\n  if (super.type == \"regression\") {\n    pd <- laply(x.values, .fun = function(x) {\n      temp <- newdata\n      temp[[x.name]] <- x\n      mean(predict(object, newdata = temp))\n    }, ...)\n  } else if (super.type == \"classification\") {\n    pd <- laply(x.values, .fun = function(x) {\n      temp <- newdata\n      temp[[x.name]] <- x\n      pr <- predict(object, newdata = temp, type = \"prob\")\n      avgLogit(pr, which.class = which.class)\n    }, ...)\n  } else {\n    stop(paste(\"Partial dependence values are currently only available\",\n               \"for classification and regression problems.\"))\n  }\n\n  # Return data frame of partial dependence values\n  pd_df <- data.frame(x = x.values, y = pd)\n  names(pd_df) <- c(x.name, \"y\")\n  pd_df\n\n}\n",
    "created" : 1457011680124.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4010325772",
    "id" : "6EC91C6E",
    "lastKnownWriteTime" : 1457039782,
    "path" : "~/Desktop/Dropbox/devel/partial/R/partial_1d.R",
    "project_path" : "R/partial_1d.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}